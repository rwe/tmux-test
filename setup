#!/usr/bin/env bash

# invoke this script from your projects root directory

# pass "undo" as a script arg to undo most of the setup actions
UNDO_SETUP="$1"
undo() {
	[[ "$UNDO_SETUP" == 'undo' ]]
}

restore() {
	local file="$1"
	rm -f "$file"
	git checkout -- "$file" 2>/dev/null
}

has-line() {
	grep -q --fixed-strings --line-regexp "$1"
}

not-line() {
	grep -v --fixed-strings --line-regexp "$1"
}

add-line() {
	local line="$1" file="$2"
	has-line "$line" < "$file" || printf '%s\n' "$line" >> "$file"
}

remove-line() {
	local line="$1" file="$2" filtered
	filtered="$(not-line "$line" < "$file")"
	printf '%s\n' "$filtered" > "$file"
}

gitignore() {
	add-line "$1" .gitignore
}

remove_from_gitignore() {
	remove-line "$1" .gitignore
}

add_files_to_gitignore() {
	if ! undo; then
		gitignore 'run_tests'
		gitignore 'tests/run_tests_in_isolation'
		gitignore 'tests/helpers/helpers.sh'
	else
		remove_from_gitignore 'run_tests'
		remove_from_gitignore 'tests/run_tests_in_isolation'
		remove_from_gitignore 'tests/helpers/helpers.sh'
	fi
}

symlink_user_test_runner() {
	local file='run_tests'
	if ! undo; then
		ln -sf "lib/tmux-test/${file}" "$file"
	else
		restore "$file"
	fi
}

create_directory_for_tests() {
	if ! undo; then
		mkdir -p tests/helpers/
	fi
}

symlink_internal_test_runner() {
	local file='tests/run_tests_in_isolation'
	if ! undo; then
		ln -sf "../lib/tmux-test/${file}" "$file"
	else
		restore "$file"
	fi
}

symlink_test_helpers() {
	local file='tests/helpers/helpers.sh'
	if ! undo; then
		ln -sf "../../lib/tmux-test/${file}" "$file"
	else
		restore "$file"
	fi
}

copy_travis_yml() {
	local file='.travis.yml'
	if ! undo; then
		cp "lib/tmux-test/${file}" "$file"
	else
		restore "$file"
	fi
}

main() {
	add_files_to_gitignore
	symlink_user_test_runner
	create_directory_for_tests
	symlink_internal_test_runner
	symlink_test_helpers
	copy_travis_yml
}
main

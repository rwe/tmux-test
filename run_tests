#!/usr/bin/env bash

# This file is a symlink from 'tmux-test' plugin.
# You probably don't want to edit it.

# Run this script when running a test suite.

# For each virtual machine where tests run, this script performs the following:
# - starts VM
# - starts the test suite witin a VM
# - stops the VM after the test suite is done

BOXES=()
FILES=()
KEEP_RUNNING=

# This file after resolving symlinks, e.g. "${PWD}/lib/tmux-test/run_tests"
SCRIPT="$(realpath "${BASH_SOURCE[0]}")"

VAGRANT_CWD="$(dirname "${SCRIPT}")/"
export VAGRANT_CWD

# Shell-quote the arguments as individaul words.
sh:() {
	[[ $# -lt 1 ]] || printf '%q' "$1"
	[[ $# -lt 2 ]] || printf ' %q' "${@:2}"
}

display_help() {
	echo 'Usage:'
	echo '  ./run_tests                      # runs tests on default VM ubuntu'
	echo '  ./run_tests -m ubuntu            # runs tests on ubuntu VM'
	echo '  ./run_tests -m ubuntu -m centos  # runs tests on ubuntu and cents VMs'
	echo '  ./run_tests tests/some_test      # run a single test file'
	echo '  ./run_tests --keep-running       # don'\''t stop vagrant after the tests are done'
}

parse_arguments() {
	while [[ $# -gt 0 ]]; do
		case "$1" in
		-m | --machine)
			local machine="$2"
			if [[ "$machine" == 'ubuntu' || "$machine" == 'centos' ]]; then
				BOXES+=("$machine")
			else
				echo "Unknown machine '$machine'"
				echo
				display_help
				exit 1
			fi
			shift 2
			;;

		-k | --keep-running)
			KEEP_RUNNING='true'
			shift
			;;

		-h | --help)
			display_help
			exit 0
			;;

		--) # End of all options
			shift
			FILES=("$@")
			break
			;;

		-* )
			echo "Error: Unknown option: $1" >&2
			echo
			display_help
			exit 1
			;;

		*)  # No more options
			FILES=("$@")
			break
			;;
		esac
	done

	# default options
	if [[ "${#BOXES[@]}" -eq 0 ]]; then
		BOXES=(ubuntu)
	fi
}

run_vagrant() {
	local box="$1"
	vagrant up "$box"
}

# Halt vagrant after tests are done running, unless `--keep-running`
# option is given
stop_vagrant() {
	local box="$1"
	vagrant halt "$box"
}

run_tests() {
	local box="$1" test_files=("${@:2}")
	local test_dir='/vagrant' test_runner='tests/run_tests_in_isolation'

	local cd_cmd test_cmd
	cd_cmd="$(sh: cd "$test_dir")"
	test_cmd="$(sh: "$test_runner" "${test_files[@]}")"

	echo "Running test suite on $box from: ${test_dir}/${test_runner}"
	echo
	vagrant ssh "$box" -c "${cd_cmd} && ${test_cmd}"
}

exit_message() {
	local exit_val="$1"
	echo
	if [[ "$exit_val" -eq 0 ]]; then
		echo 'Success, tests pass!'
	else
		echo 'Tests failed!' 1>&2
	fi
}

run_tests_on_vm() {
	local box="$1" keep_running="$2" files=("${@:3}") status=0
	run_vagrant "$box"
	run_tests "$box" "${files[@]}" || status=$?
	if [[ -z "$keep_running" ]]; then
		stop_vagrant "$box"
	else
		echo
		echo '--keep-running option set, Vagrant not halted'
	fi
	return $status
}

main() {
	parse_arguments "$@"

	local box status=0
	for box in "${BOXES[@]}"; do
		run_tests_on_vm "$box" "$KEEP_RUNNING" "${FILES[@]}" || status=$?
	done

	exit_message $status
	return $status
}
main "$@"
